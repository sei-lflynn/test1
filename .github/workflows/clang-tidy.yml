name: Clang-Tidy Analysis

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  clang-tidy:
    runs-on: ubuntu-latest
    env:
      # ccache tuning
      CCACHE_DIR: ~/.cache/ccache
      CCACHE_BASEDIR: ${{ github.workspace }}
      CCACHE_MAXSIZE: 500M
      # Choose the LLVM toolchain version to install/cache
      LLVM_VERSION: "18"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Base packages: make toolchain, ccache, and bear (for compile_commands.json)
      - name: Install base packages
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential ccache bear pkg-config

      # ---- Cached LLVM + clang-tidy install ----
      - name: Install cached LLVM toolchain (clang/clang++/clang-tidy)
        uses: KyleMayes/install-llvm-action@v2
        with:
          version: ${{ env.LLVM_VERSION }}
          directory: ${{ runner.tool_cache }}/llvm

      - name: Verify clang/clang-tidy in PATH
        run: |
          which clang
          which clang++
          which clang-tidy
          clang --version
          clang-tidy --version

      # ---- clang-tidy-sarif via cargo (with caching) ----
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry and git db
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install clang-tidy-sarif (cargo)
        run: |
          set -euxo pipefail
          cargo install --locked clang-tidy-sarif
          echo "$HOME/.cargo/bin" >> "$GITHUB_PATH"

      - name: Verify clang-tidy-sarif
        run: clang-tidy-sarif --version

      # ccache (helps if your Make build compiles; harmless otherwise)
      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ~/.cache/ccache
          key: ${{ runner.os }}-ccache-${{ hashFiles('**/Makefile', '**/makefile', '**/*.mk') }}
          restore-keys: |
            ${{ runner.os }}-ccache-

      # --- Build (only if needed) to produce compile_commands.json with Bear ---
      - name: Ensure compile_commands.json
        id: compdb
        shell: bash
        run: |
          set -euo pipefail

          if [[ -f compile_commands.json ]]; then
            echo "Found compile_commands.json at repo root."
            echo "db=compile_commands.json" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "compile_commands.json not found; generating with Bear + Make..."
          # Try a clean build first (ignore failures if clean is unsupported)
          make clean >/dev/null 2>&1 || true

          # Use Bear to wrap make; this will emit compile_commands.json in CWD
          # If your project needs specific make targets or variables, adjust here.
          bear -- make -j"$(nproc)"

          if [[ -f compile_commands.json ]]; then
            echo "db=compile_commands.json" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "Failed to generate compile_commands.json with Bear + Make." >&2
          exit 1

      - name: List source files
        id: sources
        shell: bash
        run: |
          set -euo pipefail
          files=$(git ls-files '*.c' '*.cc' '*.cpp' '*.cxx' || true)
          if [[ -z "${files}" ]]; then
            echo "No C/C++ source files found; creating empty list to skip clang-tidy."
            echo "files=" >> "$GITHUB_OUTPUT"
          else
            printf "%s\n" ${files} > source_files.txt
            echo "files=source_files.txt" >> "$GITHUB_OUTPUT"
          fi

      - name: Run clang-tidy
        if: steps.sources.outputs.files != ''
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p reports
          compdb_file="${{ steps.compdb.outputs.db }}"
          compdb_dir="$(dirname "${compdb_file}")"
          echo "Using compile database at: ${compdb_file}"
          # Run in batches; do not fail the job on findings
          xargs -a source_files.txt -r -n 50 clang-tidy -p "${compdb_dir}" > reports/clang-tidy.txt || true

      - name: Convert clang-tidy output to SARIF
        if: steps.sources.outputs.files != ''
        run: |
          mkdir -p reports
          if [[ -f reports/clang-tidy.txt ]]; then
            clang-tidy-sarif reports/clang-tidy.txt > reports/clang-tidy.sarif
          else
            echo '{"version":"2.1.0","$schema":"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json","runs":[]}' > reports/clang-tidy.sarif
          fi

      - name: Upload SARIF to GitHub
        if: steps.sources.outputs.files != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/clang-tidy.sarif

      - name: ccache stats (optional)
        run: ccache -s || true

      - name: Skip notice (no sources)
        if: steps.sources.outputs.files == ''
        run: echo "No C/C++ source files found. Skipping clang-tidy."
