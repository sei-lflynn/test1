# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow checks out code, performs a Codacy security scan
# and integrates the results with the
# GitHub Advanced Security code scanning feature.  For more information on
# the Codacy security scan action usage and parameters, see
# https://github.com/codacy/codacy-analysis-cli-action.
# For more information on Codacy Analysis CLI in general, see
# https://github.com/codacy/codacy-analysis-cli.

name: Codacy Security Scan

on:
  push:
    branches: [ "main" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ "main" ]
  schedule:
    - cron: '16 7 * * 2'

permissions:
  contents: read

jobs:
  codacy-security-scan:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    name: Codacy Security Scan
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Codacy Analysis CLI
        #uses: codacy/codacy-analysis-cli-action@d840f886c4bd4edc059706d09c6a1586111c540b
        with:
          # Check https://github.com/codacy/codacy-analysis-cli#project-token to get your project token from your Codacy repository
          # You can also omit the token and run the tools that support default configurations
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}

          # --- make the scan more thorough / let heavy tools run ---
          allow-network: true           # enables tools that need compilation/network (e.g., SpotBugs/FindSecBugs)
          parallel: 1                   # run tools sequentially to reduce resource pressure (slower but more stable)
          tool-timeout: 1hour           # give slow analyzers time to finish
          max-tool-memory: 8g           # avoid OOM on big projects

          # --- SARIF for GitHub Code Scanning (with CWE when available) ---
          format: sarif
          output: results.sarif
          gh-code-scanning-compat: true # adjust non-security severities for GitHubâ€™s UI

          # --- optional: ensure certain client-side security tools run (if applicable to your repo) ---
          # run-gosec: "true"             # Go SAST (if you have Go)
          # run-staticcheck: "true"        # Go general/static checks (finds correctness bugs)

          # --- keep the job green so SARIF always uploads-----
          # Force 0 exit code to allow SARIF file generation
          # This will handover control about PR rejection to the GitHub side
          verbose: true
          max-allowed-issues: 2147483647

      # Upload the SARIF file generated in the previous step
      - name: Upload SARIF results file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif
jobs:
  codacy-security-scan:
    permissions:
      contents: read
      security-events: write
      actions: read
    name: Codacy Security Scan (CLI v2)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Install Codacy CLI v2 (Linux/WSL installer script)
      - name: Install Codacy CLI v2
        run: |
          bash <(curl -Ls https://raw.githubusercontent.com/codacy/codacy-cli-v2/main/codacy-cli.sh)
          codacy-cli version

      # (Optional) Initialize local config to include all available tools
      # or fetch repo config from Codacy if you prefer server-side settings.
      - name: Initialize Codacy CLI config
        run: |
          # Local mode: include all relevant tools & create .codacy/ with tool configs
          codacy-cli init
          # --- OR, to fetch your Codacy repo config instead (uncomment and set secrets) ---
          # codacy-cli init \
          #   --api-token "${{ secrets.CODACY_API_TOKEN }}" \
          #   --provider gh \
          #   --organization your-org \
          #   --repository your-repo

      # Install runtimes and tools declared in .codacy/codacy.yaml
      - name: Install toolchains
        run: codacy-cli install

      # Run all configured tools and emit SARIF for GitHub Code Scanning
      - name: Analyze (SARIF)
        run: codacy-cli analyze --format sarif -o results.sarif

      - name: Upload SARIF results file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif
